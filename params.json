{"name":"Reactable","tagline":"Fast, flexible, and simple data tables in React","body":"Reactable [![Build Status](https://travis-ci.org/abdulrahman-khankan/reactable.svg?branch=master)](https://travis-ci.org/abdulrahman-khankan/reactable)\r\n=========\r\n\r\nFast, flexible, and simple data tables in React.\r\n\r\nThis is a work in progress. Much of the API defined in this readme won't work\r\nyet. If you like the look of this, feel free to star or watch the repository. If\r\nyou're ambitious or feel like getting your hands dirty, I welcome pull requests!\r\nI promise I won't bite.\r\n\r\n## Installation\r\n\r\n**Using Bower:**\r\n\r\n```\r\nbower install [--save] reactable\r\n```\r\n\r\nOr, you can just download the raw file\r\n[here](https://github.com/abdulrahman-khankan/reactable/raw/master/build/reactable.js).\r\n\r\n## Usage\r\n\r\nThe simplest example:\r\n\r\n```javascript\r\nvar Table = Reactable.Table;\r\nReact.renderComponent(\r\n    <Table className=\"table\" data={[\r\n        { Name: 'Griffin Smith', Age: '18' },\r\n        { Age: '23',  Name: 'Lee Salminen' },\r\n        { Age: '28', Position: 'Developer' },\r\n    ]} />,\r\n    document.getElementById('table')\r\n);\r\n```\r\n\r\nWhile pretty basic, this example demonstrates a couple things:\r\n- Columns in the data array can be in any order, and you can omit any you like\r\n- Regular React DOM attributes such as className will pass-through to the\r\n  rendered `<table>`\r\n\r\n### Further Customization\r\n\r\nYou can also manually build up your rows using `Reactable.Tr` nested in a table,\r\nalso using the `data` prop, but this time containing only one javascript object.\r\nThis approach can be freely combined with the `data` property on the `<Table>`,\r\nand is useful if you want to specify per-row attributes such as classes, like so:\r\n\r\n```javascript\r\nvar Table = Reactable.Table,\r\n    Tr = Reactable.Tr;\r\n\r\nReact.renderComponent(\r\n    <Table className=\"table\" data={[\r\n        { name: 'Row one', content: 'These are regular data rows' },\r\n        { name: 'Row two', content: 'They work like above' },\r\n    ]} >\r\n        <Tr className=\"special-row\"\r\n            data={{ name: 'Other Row' , content: 'This is a different row' }} />\r\n    </Table>,\r\n    document.getElementById('table');\r\n)\r\n```\r\n\r\n### Pagination\r\n\r\nYou can also use pagination, by just specifying an `itemsPerPage` argument to the\r\n`<Table>` component. For example:\r\n\r\n```javascript\r\n<Table className=\"table\" data={[\r\n    { Name: 'Griffin Smith', Age: '18' },\r\n    { Age: '23',  Name: 'Lee Salminen' },\r\n    { Age: '28', Position: 'Developer' },\r\n    { Name: 'Griffin Smith', Age: '18' },\r\n    { Age: '30',  Name: 'Test Person' },\r\n    { Name: 'Another Test', Age: '26', Position: 'Developer' },\r\n    { Name: 'Third Test', Age: '19', Position: 'Salesperson' },\r\n    { Age: '23',  Name: 'End of this Page', Position: 'CEO' },\r\n]} itemsPerPage={4} />\r\n```\r\n\r\n### Sorting\r\n\r\nYou can specify which columns will sort by click by specifing the `sortable` argument\r\nto the `<Table>` component.  This is an array of column names or column objects.\r\n\r\nYou can specify a custom sort function by defining a column object with structure:\r\n\r\n```javascript\r\n\r\n{column: 'Column Name', sortFunction: function(a, b){} }\r\n```\r\n\r\nYou can also specify a default sort by passing in either a column name by itself, or an object\r\nwith a column and a `direction` paramenter of either `asc` or `desc`.\r\nIf no direction is specified, the default sort will be ascending.  Example:\r\n\r\n```javascript\r\n\r\n{column: 'Column Name', direction: 'asc' }\r\n```\r\n\r\nCombined example:\r\n\r\n```javascript\r\n<Table className=\"table\" id=\"table\" data={[\r\n    { Name: 'Lee Salminen', Age: '23', Position: 'Programmer'},\r\n    { Name: 'Griffin Smith', Age: '18', Position: 'Engineer'},\r\n    { Name: 'Ian Zhang', Age: '28', Position: 'Developer'}\r\n]}\r\nsortable={[\r\n    {\r\n        column: 'Name',\r\n        sortFunction: function(a, b){\r\n            // Sort by last name\r\n            var nameA = a.split(' ');\r\n            var nameB = b.split(' ');\r\n\r\n            return nameA[1].localeCompare(nameB[1]);\r\n        }\r\n    },\r\n    'Age',\r\n    'Position'\r\n]}\r\ndefaultSort={{column: 'Age', direction: 'desc'}}/>\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}